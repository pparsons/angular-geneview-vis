{
  "name": "cyto-chromosome-vis",
  "version": "1.3.0",
  "description": "Interactive visual representation/ web visualization tool for chromosome ideograms",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/linjoey/cyto-chromosome-vis.git"
  },
  "author": {
    "name": "Joe Zhao Lin",
    "email": "linjoeyy@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/linjoey/cyto-chromosome-vis/issues"
  },
  "homepage": "https://github.com/linjoey/cyto-chromosome-vis#readme",
  "devDependencies": {
    "d3": "^3.5.5",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-uglify": "^1.2.0",
    "qunitjs": "^1.18.0"
  },
  "readme": "# cyto-chromosome-vis\n\n> Interactive visual representation/ web visualization tool for **chromosome** ideograms\n\nThis is a web component built with D3.js to render chromosome representations in SVG. Each chromosome has interactive features such as clicking a band, picking a specific cyto-location (base pair), or removing a specific selection. A convenient API is included to integrate user actions on the chromosomes with other js components. \n\nThis can be used in plain JavaScript environments or with ***Angular.js*** (as a directive or a service).\n\n### Demo\nA demo is available here: http://linjoey.github.io/cyto-chromosome-vis/\n![](ss-1.3.0.png)\n\n### Basic Usage\n\n1. Include D3 and the project source: `cyto-chromosome.min.js`\n\n2. Create a target div to host the chromosome\n```html\n<div id=\"chrY\"></div>\n```\n3. Instantiate a chromosome object.\n```javascript\nvar chromosomeFactory = cyto_chr.chromosome;\nvar x = chromosomeFactory()\n        .segment(\"X\")\n        .target('#chrX')\n        .render();\n```\n\n### Angular environments\n1. Include the module `cyto-chromosome-vis` as a project dependency\n```javascript\nangular.module('demoApp',['cyto-chromosome-vis'])\n```\n\n2. Simply use the directive `chromosome`\n```html\n<chromosome segment=\"X\" width=\"1000\" show-axis=\"true\" use-relative=\"true\" resolution=\"400\"></chromosome>\n```\n\n3. If you require interacting with the chromosome instance from a controller, manually instantiate it with the service `chromosomeFactory`:\n\n```html\n<div id=\"chr3\"></div>\n```\n```JavaScript\n.controller('someController', function($scope, chromosomeFactory) {\n                var c = chromosomeFactory.build()\n                        .target(\"#chr3\")\n                        .segment(3)\n                        .render();\n                        \n                    c.on('bandclick',...);\n            })\n\n```\n\nOnce a chromosome is drawn, `click` a band to add a selector, `shift-click` to add multiple selectors. Drag the edges of the selector to change the selection; click the red button on a selector to delete it.\n\n### Configurations\n\nConfigure chromosomes with `chromosome.config(type, value)` or `chromosome.type(value)`. `chromosome.type()` (no arguments) will return the current configuration. The default values for each configuration is shown below.\n\n```javascript\nvar s = cyto_chr.chromosome()\n    .config('segment', \"2\")\n    .config('target', '#chrX') \n    .config('resolution', \"850\") //400, 550, or 850\n    .config('width', 1200)\n    .config('useRelative', false)\n    .config('showAxis', false)\n    .render();\n    \ns.resolution(); //850\ns.width(); //1200\n```\n\n**chromosome.segment** \nThe chromosome number to draw, e.g. `\"1\" or \"X\"`\nDefault: 1\n\n**chromosome.target** \nid of a div to append the chromosome svg\nDefault: the root html document\n\n**chromosome.resolution**\ng-band resolutions\nDefault: 550\n\n**chromosome.width**\nTotal width on the page to render\nDefault: 1000\n\n**chromosome.useRelative**\nRender each chromosome relative to their real sizes. Setting this to `false` will draw the chromosome to the full `width`.\nDefault: true\n\n**chromosome.showAxis** \nDisplay the basepair axis below the chromosome\nDefault: false\n\n### Chromosome API\n\n**chromosome.render()**\nA call to `render()` will update the svg with the current configurations. If something is changed later, call to `render()` again to re-draw the chromosome.\n\n**chromosome.getSelections()**\nGet an list of all the selections on the chromosome\n\n**chromosome.on(event, callback)**\nCapture events from user interactions.\nTwo events are emmited: `bandclick` and `selectorchange`\n\n```javascript\nchromosome.on('bandclick', function(e) {\n    //e contains contextual data\n})\n```\n\nIf the data directory is changed relative to the source, updated it with:\n```javascript\ncyto_chr.modelLoader.setDataDir('../data/');\n```\n\n### Date source: \nData is loaded from static files in the `data/` directory. G-banding resolutions included are `400`, `550`, and `850`.\n\nftp://ftp.ncbi.nlm.nih.gov/pub/gdp/\n\n# License\nMIT",
  "readmeFilename": "README.md",
  "gitHead": "1b805aa2233926874a6cde76dc200c29a7a1c414",
  "_id": "cyto-chromosome-vis@1.3.0",
  "_shasum": "0565489295b418bacbb01e9b7e677bbd502eca04",
  "_from": "cyto-chromosome-vis@*"
}
